{"version":3,"file":"static/js/706.db795e0a.chunk.js","mappings":"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","sources":["components/ModalContainer.jsx","components/Notification.jsx","widgets/Notifications.jsx"],"sourcesContent":["// utils\nimport PropTypes from 'prop-types';\nimport loadable from '@loadable/component'\n\n// hooks\nimport {useModal} from '@contexts/modalContext';\nimport {useWindowSize} from 'react-use';\n\n// components\nimport Fade from '@mui/material/Fade';\nimport {ClickAwayListener} from '@mui/base/ClickAwayListener';\nimport Spring from '@components/Spring';\nconst Modal = loadable(() => import('@mui/material/Modal'));\n\nconst Slide = ({children}) => <Spring type=\"slide\">{children}</Spring>\n\nconst FadeIn = ({children}) => <Fade in timeout={300}>{children}</Fade>\n\nconst ModalContainer = ({open, children, isSidebarWidget = false}) => {\n    const {handleClose} = useModal();\n    const {width} = useWindowSize();\n\n    const AnimatedWrapper = isSidebarWidget && width >= 768 ? Slide : FadeIn;\n    const props = isSidebarWidget && width > 1280 ? {reverse: !open} : {};\n\n    return (\n        <Modal open={open}\n               onClose={handleClose}\n               closeAfterTransition\n               componentsProps={{backdrop: {className: isSidebarWidget ? 'backdrop-sidebar' : ''}}}>\n            <Fade in={open} timeout={300}>\n                <div className={`modal-container ${isSidebarWidget ? 'modal-container-sidebar' : ''}`}>\n                    <ClickAwayListener onClickAway={handleClose}>\n                       <div className=\"modal\">\n                           <AnimatedWrapper {...props}>\n                               {children}\n                           </AnimatedWrapper>\n                       </div>\n                    </ClickAwayListener>\n                </div>\n            </Fade>\n        </Modal>\n    )\n}\n\nModalContainer.propTypes = {\n    open: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n}\n\nexport default ModalContainer","// components\nimport Spring from '@components/Spring';\n\nconst Notification = ({data, index}) => {\n    const {title, text, read} = data;\n\n    return (\n        <Spring index={index} type=\"list\">\n            <div className=\"d-flex flex-column g-8 p-16 card bordered\">\n                <h4 className=\"d-flex align-items-center g-8\">\n                    {!read && <span className=\"indicator\" />} {title}\n                </h4>\n                <p>{text}</p>\n            </div>\n        </Spring>\n    )\n}\n\nexport default Notification","// components\nimport ModalContainer from '@components/ModalContainer';\nimport Notification from '@components/Notification';\nimport Spring from '@components/Spring';\nimport ScrollContainer from '@components/ScrollContainer';\n\n// hooks\nimport {useModal} from '@contexts/modalContext';\nimport {useThemeProvider} from '@contexts/themeContext';\nimport useMeasure from 'react-use-measure';\n\n// utils\nimport dayjs from 'dayjs';\nimport {memo} from 'react';\n\n// data placeholder\nimport notifications from '@db/notifications';\nimport classNames from 'classnames';\n\nconst WidgetWrapper = ({children, theme}) => {\n    const [ref, {height}] = useMeasure();\n\n    return (\n        <Spring className={classNames('widget card h-100', {'card--no-bg': theme === 'light'})}>\n            <h2 className=\"p-16\" ref={ref}>Notifications</h2>\n            <ScrollContainer height={height} bg=\"widget-bg\">\n                <div className=\"track border-12\" style={{padding: '0 16px'}}>\n                    <div className=\"d-flex flex-column g-8 pb-16 scroll-y\">\n                        {children}\n                    </div>\n                </div>\n            </ScrollContainer>\n        </Spring>\n    )\n}\n\nconst ModalWrapper = ({children, open, isSidebarWidget}) => {\n    return (\n        <ModalContainer open={open} isSidebarWidget={isSidebarWidget}>\n            <div className=\"modal widget_body card scroll-y\">\n                {children}\n            </div>\n        </ModalContainer>\n    )\n}\n\nconst Notifications = ({isSidebarWidget}) => {\n    const {theme} = useThemeProvider();\n    const {open, modal} = useModal();\n\n    const dates = notifications.map(item => {\n        return {\n            date: dayjs(item.date).format('YYYY-MM-DD'),\n            timestamp: item.date\n        }\n    });\n\n    const uniqueDates = [...new Map(dates.map(item => [item.date, item])).values()];\n\n    const Wrapper = isSidebarWidget ? ModalWrapper : WidgetWrapper;\n\n    const wrapperProps = isSidebarWidget ?\n        {\n            open: open && modal === 'notifications',\n            isSidebarWidget: isSidebarWidget\n        }\n        :\n        {\n            theme: theme\n        };\n\n    return (\n        <Wrapper {...wrapperProps}>\n            {\n                uniqueDates.map((item, index) => (\n                    <div className=\"d-flex flex-column g-8\" key={index}>\n                            <span className=\"text-light text-10 text-600\">\n                                {\n                                    dayjs(item.date).isSame(dayjs(), 'day') ?\n                                        'Today'\n                                        :\n                                        dayjs(item.timestamp).format('DD.MM.YY, HH:mm')\n                                }\n                            </span>\n                        {\n                            notifications.map((notification, index) => (\n                                dayjs(notification.date).format('YYYY-MM-DD') === item.date &&\n                                <Notification data={notification} key={index} index={index}/>\n                            ))\n                        }\n                    </div>\n                ))\n            }\n        </Wrapper>\n    )\n}\n\nexport default memo(Notifications);"],"names":["Modal","loadable","Slide","_ref","children","_jsx","Spring","type","FadeIn","_ref2","Fade","in","timeout","_ref3","open","isSidebarWidget","handleClose","useModal","width","useWindowSize","AnimatedWrapper","props","reverse","onClose","closeAfterTransition","componentsProps","backdrop","className","concat","ClickAwayListener","onClickAway","data","index","title","text","read","_jsxs","WidgetWrapper","theme","ref","height","useMeasure","classNames","ScrollContainer","bg","style","padding","ModalWrapper","ModalContainer","Notifications","useThemeProvider","modal","dates","notifications","map","item","date","dayjs","format","timestamp","uniqueDates","Map","values","Wrapper","wrapperProps","isSame","notification","Notification","memo"],"sourceRoot":""}